# -*- coding: utf-8 -*-
"""spam detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sqr7YnPQtsiX3GlfQOquS9JCOdBeCqqU
"""

import streamlit as st
import joblib
import pandas as pd
import re
import string

# --- Load models and vectorizer ---
@st.cache_resource
def load_resources():
    try:
        vectorizer = joblib.load('vectorizer.joblib')
        lr_model = joblib.load('lr_model.joblib')
        rf_model = joblib.load('rf_model.joblib')
        nb_model = joblib.load('nb_model.joblib')
        return vectorizer, lr_model, rf_model, nb_model
    except FileNotFoundError:
        st.error("Error: Model files not found. Please ensure 'vectorizer.joblib', 'lr_model.joblib', 'rf_model.joblib', and 'nb_model.joblib' are in the same directory.")
        return None, None, None, None

vectorizer, lr_model, rf_model, nb_model = load_resources()

# --- Model Accuracy Data (You need to get these values from your training script) ---
# Replace these with the actual accuracy scores from your training process.
accuracy_scores = {
    "Logistic Regression": 0.965, # Example accuracy
    "Random Forest": 0.978,      # Example accuracy
    "Multinomial Naive Bayes": 0.952  # Example accuracy
}

# --- Text Preprocessing Function ---
def preprocess_text(text):
    if not isinstance(text, str):
        return ""
    alphanumeric = lambda x: re.sub(r"""\w*\d\w*""", '', x)
    punc_lower = lambda x: re.sub('[%s]' % re.escape(string.punctuation), ' ', x.lower())
    processed_text = alphanumeric(text)
    processed_text = punc_lower(processed_text)
    return processed_text

# --- Streamlit UI Components ---

# Set a professional blue theme
st.markdown("""
<style>
.main {
    background-color: #f0f2f6;
    padding: 20px;
    border-radius: 10px;
}
.st-emotion-cache-1g6goqg {
    background-color: #004d99;
    color: white;
    padding: 15px;
    border-radius: 10px;
    text-align: center;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
.st-emotion-cache-1g6goqg h1 {
    font-family: 'Segoe UI', sans-serif;
    font-weight: bold;
}
.st-emotion-cache-12fmw51 {
    background-color: #e6f2ff;
    border-left: 5px solid #0066cc;
    padding: 10px;
    border-radius: 5px;
    color: #333;
}
.st-emotion-cache-1v0y47i {
    background-color: #005aab;
    color: white;
    font-weight: bold;
    border-radius: 5px;
    padding: 10px;
}
.st-emotion-cache-1g6goqg p {
    font-size: 1.1em;
    color: #cce0ff;
}
</style>
""", unsafe_allow_html=True)

st.markdown('<div class="st-emotion-cache-1g6goqg"><h1>Spam Email Detector</h1><p>Harnessing the power of Machine Learning to identify spam.</p></div>', unsafe_allow_html=True)

st.write("") # Add some space

# Model Selection Dropdown
model_option = st.selectbox(
    "**Choose a Machine Learning Model**",
    ("Logistic Regression", "Random Forest", "Multinomial Naive Bayes")
)

# Display Model Accuracy
if model_option:
    st.markdown(f"""
    <div style="background-color: #e6f2ff; padding: 10px; border-radius: 5px; border-left: 5px solid #0066cc; margin-bottom: 20px;">
        <p style="margin: 0; color: #000000;">
            <strong>Accuracy of {model_option}:</strong> {accuracy_scores[model_option]*100:.2f}%
        </p>
    </div>
    """, unsafe_allow_html=True)

# User Input Text Area
st.subheader("Enter the Email Content Below:")
email_text = st.text_area("Paste your email text here...", height=200, help="The model will analyze this text to determine if it's spam or ham.")

# Prediction Button
if st.button("Analyze Email", help="Click to classify the email."):
    if email_text:
        # Preprocess the input text
        processed_text = preprocess_text(email_text)

        # Transform the text using the loaded vectorizer
        text_transformed = vectorizer.transform([processed_text])

        # Make prediction based on the selected model
        selected_model = None
        if model_option == "Logistic Regression":
            selected_model = lr_model
        elif model_option == "Random Forest":
            selected_model = rf_model
        else: # Multinomial Naive Bayes
            selected_model = nb_model

        if selected_model:
            prediction = selected_model.predict(text_transformed)[0]
            probability = selected_model.predict_proba(text_transformed)[0]

            # Display result with a colored box
            # Display result with a colored box
        if prediction == 'spam':
            st.markdown(f"""
            <div style="background-color: #ffcccc; padding: 20px; border-radius: 10px; border-left: 5px solid #ff0000; margin-top: 20px;">
                <h3 style="color: #cc0000; margin-top: 0;">Prediction: <span style="font-weight: bold;">SPAM</span></h3>
                <p style="margin-bottom: 0;">This email is likely to be spam with a probability of {probability[1]*100:.2f}%.</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div style="background-color: #ccffcc; padding: 20px; border-radius: 10px; border-left: 5px solid #009900; margin-top: 20px;">
                <h3 style="color: #006600; margin-top: 0;">Prediction: <span style="font-weight: bold;">HAM</span></h3>
                <p style="margin-bottom: 0;">This email is likely to be ham (not spam) with a probability of {probability[0]*100:.2f}%.</p>
            </div>
            """, unsafe_allow_html=True)
    else:
        st.warning("Please enter some text to analyze.")
