# -*- coding: utf-8 -*-
"""train and save model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bj3xA2nXDjJReEqYdDSAe_N3zYzCgA1M
"""

!pip install scikit-learn
import pandas as pd
import joblib

data = pd.read_csv('spam_ham_dataset.csv')
data = data[['label', 'text']]
print(data.head())
len(data)
import re
import string

# remove words with numbers
alphanumeric = lambda x: re.sub(r"""\w*\d\w*""", '', x)
# remove punctuation & convert to lowercase
punc_lower = lambda x: re.sub('[%s]' % re.escape(string.punctuation), ' ', x.lower())

data['text'] = data['text'].map(alphanumeric).map(punc_lower)

print(data.head())
print(len(data))
X = data.text
y = data.label

# Split into train/test
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)
from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer(stop_words='english')
X_train_cv = cv.fit_transform(X_train)
X_test_cv = cv.transform(X_test)

print(X_train_cv.shape)
from sklearn.linear_model import LogisticRegression

lr = LogisticRegression(max_iter=200)
lr.fit(X_train_cv, y_train)

y_pred_cv = lr.predict(X_test_cv)
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

cm = confusion_matrix(y_test, y_pred_cv)
sns.heatmap(cm, annot=True, fmt='d', cmap='YlGnBu',
            xticklabels=['pred_ham','pred_spam'],
            yticklabels=['actual_ham','actual_spam'])
plt.show()

print(classification_report(y_test, y_pred_cv))
Sentence1 = ["You won $1000 prize, click here to claim now!"]
Snew = cv.transform(Sentence1)
result = lr.predict(Snew)
print(result)
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report, accuracy_score

lr = LogisticRegression(max_iter=200)
lr.fit(X_train_cv, y_train)
y_pred_lr = lr.predict(X_test_cv)
print("\n=== Logistic Regression Results ===")
print(classification_report(y_test, y_pred_lr))
print("Accuracy:", accuracy_score(y_test, y_pred_lr))
from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=300, random_state=42, n_jobs=-1)
rf.fit(X_train_cv, y_train)
y_pred_rf = rf.predict(X_test_cv)

print("\n=== Random Forest Results ===")
print(classification_report(y_test, y_pred_rf))
print("Accuracy score for RF:", round(accuracy_score(y_test, y_pred_rf), 3))
from sklearn.naive_bayes import MultinomialNB

nb = MultinomialNB()
nb.fit(X_train_cv, y_train)
y_pred_nb = nb.predict(X_test_cv)

print("\n=== Naive Bayes Results ===")
print(classification_report(y_test, y_pred_nb))
print("Accuracy score for NB:", round(accuracy_score(y_test, y_pred_nb), 2))

# 6. Save the trained model and the vectorizer
# This is the crucial step for deployment
joblib.dump(cv, 'vectorizer.joblib')

# Train and save the Logistic Regression model
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(max_iter=200)
lr.fit(X_train_cv, y_train)
joblib.dump(lr, 'lr_model.joblib') # Save with a clear name

# Train and save the Random Forest model
from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators=300, random_state=42, n_jobs=-1)
rf.fit(X_train_cv, y_train)
joblib.dump(rf, 'rf_model.joblib') # Save the RF model

# Train and save the Naive Bayes model
from sklearn.naive_bayes import MultinomialNB
nb = MultinomialNB()
nb.fit(X_train_cv, y_train)
joblib.dump(nb, 'nb_model.joblib') # Save the NB model

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(stop_words='english')
cv.fit_transform(X_train)
joblib.dump(cv, 'vectorizer.joblib')